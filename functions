#!/bin/bash

# Includes

# Get the directory of the current script
DIR="$(dirname "$0")"

# Include all function files in the functions.d/ directory
for file in "$DIR/functions.d/"*; do
  if [ -f "$file" ]; then
    # shellcheck source=/dev/null
      source "$file"
  fi
done



# ==============================
# Section 1: File Operations
# ==============================

# Function to extract various types of compressed files
tarx () {
  if [ -f "$1" ]; then
    case "$1" in
      *.tar.bz2) tar xvjf "$1" ;;
      *.tar.gz) tar xvzf "$1" ;;
      *.bz2) bunzip2 "$1" ;;
      *.rar) unrar x "$1" ;;
      *.gz) gunzip "$1" ;;
      *.tar) tar xvf "$1" ;;
      *.tbz2) tar xvjf "$1" ;;
      *.tgz) tar xvzf "$1" ;;
      *.zip) unzip "$1" ;;
      *.Z) uncompress "$1" ;;
      *.7z) 7z x "$1" ;;
      *) echo "$1 cannot be extracted via extract()" ;;
    esac
  else
    echo "$1 is not a valid file"
  fi
}
zle -N tarx
#alias tarx="tar -xzvf"
#alias tarz="tar -xvf"
tarc() {
  if [[ "$1" == *.tgz ]] || [[ "$1" == *.tar.gz ]]; then
    archive="$1"
    tar --owner=0 --group=0 --exclude "$archive" --checkpoint=10 --full-time --totals -czRvf "$@"
  else
    echo "need to specify a file  name *.tgz or *.tar.gz archive to "
  fi
}
# Function to extract compressed files and create a directory based on the filename if there are multiple files in the archive
tarxx() {
  local l=""
  l=$(tar tf "$1")
  # shellcheck disable=SC2126
  if [ "$(echo "$l" | wc -l)" -eq "$(echo "$l" | grep "$(echo "$l" | head -n1)" | wc -l)" ]; then 
    tar xf "$1"
  else 
    mkdir "${1%.t(ar.gz||ar.bz2||gz||bz||ar)}" && tar xvf "$1" -C "${1%.t(ar.gz||ar.bz2||gz||bz||ar)}"
  fi
}

# Function to create a compressed tar archive of a directory
tarcc () {
  local name="$1"
  if [ -n "$name" ]; then
    tar cvjf "$1".tar.bz2 "$1"
  fi
}


# Function to backup a file by appending the current date to its name
buf () {
  local oldname=""
  local datepart=""
  local firstpart=""
  local newname=""
  oldname="$1"
  if [ -n "$oldname" ]; then
    datepart=$(date +%Y-%m-%d)
    firstpart=$(echo "$oldname" | cut -d "." -f 1)
    # shellcheck disable=SC2001
    newname=$(echo "$oldname" | sed s/"$firstpart"/"$firstpart"."$datepart"/)
    cp -R "${oldname}" "${newname}"
  fi
}

# ==============================
# Section 2: Information Display
# ==============================

# Function to list the newest files in the current directory and its subdirectories
newest () { 
  find . -type f -printf '%TY-%Tm-%Td %TT %p\n' | grep -v cache | grep -v ".hg" | grep -v ".git" | sort -r | less
}

# Function to display a clock in the top right corner of the console
clock () {
  while sleep 1; do
    tput sc
    tput cup 0 $(($(tput cols)-29))
    date
    tput rc
  done &
}

# ==============================
# Section 3: Script Creation
# ==============================

# Function to create a new executable script file with a shebang line, edit the script, and make it executable
shebang() {
  local i=""
  i=$(which "$1")
  if [ -n "$i" ]; then
    printf '#!/usr/bin/env %s\n\n' "$1" > "$2" && chmod 755 "$2" && vim + "$2" && chmod 755 "$2"
  else
    echo "'which' could not find $1, is it in your \$PATH?"
  fi
  rehash
}

# ==============================
# Section 5: Web Queries
# ==============================

# Function to query Wikipedia via console over DNS
wp() {
  dig +short txt "${1}".wp.dg.cx
}

# Function to translate text using Google Language Tools
translate() {
  wget -qO- "http://ajax.googleapis.com/ajax/services/language/translate?v=1.0&q=$1&langpair=$2|${3:-en}" | sed 's/.*"translatedText":"\([^"]*\)".*}/\1\n/'
}

# ==============================
# Section 6: Command Line Utilities
# ==============================



# ==============================
# Section 7: Miscellaneous
# ==============================
# Define  color codes

T_GREEN='\033[0;32m' # Green
T_YELLOW='\033[0;33m' # Yellow
T_RED='\033[0;31m' # Red
T_RESET='\033[0m' # Text Reset

# Function to reveal executed alias
alias_for() {
  local search=""
  local found=""
  search=${1}
  found="$( alias "$search" 2>/dev/null )"
  if [[ -n $found ]]; then
    found=${found//\\//} # Replace backslash with slash
    found=${found%\'} # Remove end single quote
    found=${found#"$search="} # Remove alias name
    found=${found#"'"} # Remove first single quote
    echo "${found} ${2}" | xargs # Return found value (with parameters
  else
    echo ""
  fi
}


expand_command_line () {
  local first=""
  local rest=""
	first=$(echo "$1" | awk '{print $1;}') 
	# shellcheck disable=SC2116
	rest=$(echo "${1//$first/}") 
	if [[ -n "${first//-//}" ]]
	then
    local cmd_alias=""
		cmd_alias="$(alias_for "${first}" "${rest:1}")" 
		if [[ -n $cmd_alias ]] && [[ "${cmd_alias:0:1}" != "." ]]
		then
			echo -e "${T_GREEN}Command: ${T_YELLOW}${cmd_alias}${T_RESET}"
		fi
	fi
}


sid () {
        if [[ $2 == "-d" || $2 == "--delete" || $2 == "-del" || $2 == "--del" ]]
        then
                sed -i "/^$1/d" "$3"
        else
                sed -i "s/$1/$2/g" "$3"
        fi
}

joke(){
  curl -s https://icanhazdadjoke.com/
}

gifit(){
curl gif.xyzzy.run/"$1"
}

quote(){
  curl -s https://api.quotable.io/random | jq -r '.content'
}

weth(){
  access_key=f8bc25c9f0ecef3a074880cf085e7010
   curl -s "http://api.weatherstack.com/current?$access_key=f8bc25c9f0ecef3a074880cf085e7010"
}

s3fsmount(){
    local bucket="$1"
    local mount="$2"
    echo "$T_RED Mounting $bucket to $mount $T_RESET"

    s3fs "$bucket" "$mount" -o passwd_file="${HOME}"/.passwd-s3fs -o url=https://minio.zshmeta.dev/ -o use_path_request_style

}

facts() {
	curl -Ss https://uselessfacts.jsph.pl/api/v2/facts/random\?language=en | jq '.text'
}


sherget(){
     local user="$1"
     if ! docker run --rm -t -v "$PWD/results:/opt/sherlock/results" sherlock -o /opt/sherlock/results/text.txt "$user"; then
          podman run --rm -t -v "$PWD/results:/opt/sherlock/results" sherlock -o /opt/sherlock/results/text.txt "$user"
     fi
  }

  shersh(){
    local user="$1"
    if ! docker run --rm -t sherlock "$user"; then
       podman run --rm -t sherlock "$user"
    fi
  }



  topmem(){
    ps -eo pid,comm,%mem --sort=-%mem | head -n 14
  }

  topcpu(){
    ps -eo pid,comm,%cpu --sort=-%cpu | head -n 14
  }

  # prints if disk size vs disk usage
  topdisks(){
    df -h
  }

  # prints the 13 biggest files in the home directory
 topfiles(){
    if [ -n "$1" ]; then
      sudo find "$1" -type f -exec du -h {} + | sort -rh | head -n 13
    else
      sudo find ~ -type f -exec du -h {} + | sort -rh | head -n 13
    fi
  }


  topio(){
    iotop -o
  }

  topdisk(){
    iostat -d -x 1 2
  }

  topnet(){
    ifstat -t -n -w
  }





